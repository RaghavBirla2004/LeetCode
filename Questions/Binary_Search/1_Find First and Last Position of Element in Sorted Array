//! High Time Compelexity
  
  vector<int> searchRange(vector<int>& nums, int target) {
    //     vector<int>v;
    //        int first = -1;
    //     int last = -1;

    //     for (int i = 0; i < nums.size(); ++i) {
    //         if (nums[i] == target) {
    //             if (first == -1) {
    //                 first = i;
    //                 last = i;
    //             } else {
    //                 last = i;
    //             }
    //         }
    //     }

    //     v.push_back(first);
    //     v.push_back(last);
    //     return v;

//! Using Binary Search

#include <vector>

using namespace std;

class Solution {
private:
    int leftoccur(vector<int>& a, int size, int element) {
        int low = 0;
        int high = size - 1; 
        int ans = -1; 

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (a[mid] == element) {
                ans = mid;
                high = mid - 1;
            } else if (a[mid] < element) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }

    int rightoccur(vector<int>& a, int size, int element) {
        int low = 0;
        int high = size - 1; 
        int ans = -1; 

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (a[mid] == element) {
                ans = mid;
                low = mid + 1;
            } else if (a[mid] < element) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return ans;
    }

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> a(2, -1); 

        a[0] = leftoccur(nums, nums.size(), target);
        a[1] = rightoccur(nums, nums.size(), target);

        return a;
    }
};
